#!/bin/bash

get_open_config () {
	cat << EOF | with_common_indent 0
		TARGET="main"
		EXECUTABLE_EXT="cpp"
		CMAKE_MIN_VER="3.25"
		CMAKE_LANGUAGE="CXX"
		CMAKE_LANGUAGE_VER="1.0.0"
		CXX_STD_VER="26"
		IS_FTXUI=false
		FTXUI_VER=5
EOF
}


main () {
	local dir="$1"
	if [[ "$DONT_EXEC" == "true" ]]; then
		return 0
	fi
	
	local open_config_path="$dir/.open_config"
	make_open_config "$open_config_path"
	source "$open_config_path"
	bat -l bash "$open_config_path"

	local target="$TARGET"

	if ! $IS_FTXUI; then
		echo "Info: Not using FTXui"	
	fi

	get_cmake_lists_txt_str "$dir" "$target" > "$dir/CMakeLists.txt"
	
	mkdir -p "$dir/build"
	cd "$dir/build"
	cmake ..
	make
	./"$target"
}

get_cmake_lists_txt_str () {
local dir="$1"
local target="$2"
cat << EOF | with_common_indent 0
		cmake_minimum_required (VERSION $CMAKE_MIN_VER)
		project($target LANGUAGES $CMAKE_LANGUAGE VERSION $CMAKE_LANGUAGE_VER)
		$($IS_FTXUI && echo "find_package(ftxui $FTXUI_VER REQUIRED)")
		add_executable($target
$({
		find "$dir" -maxdepth 1 | 
		sed "/\.$EXECUTABLE_EXT$/!d" | {
			while read -r line; do
				basename "$line"
			done
		} | with_common_indent 3
})
		)
$([[ "$CMAKE_LANGUAGE" == "CXX" ]] && {
	cat << EOF2 | with_common_indent 0
		set_property(TARGET $target PROPERTY CXX_STANDARD $CXX_STD_VER)
EOF2
	cat << EOF2 | with_common_indent 0 > "$dir/.clangd"
		CompileFlags:
			Add: [-std=c++${CXX_STD_VER}]
EOF2
})
$({
		$IS_FTXUI && cat << EOF2 | with_common_indent 2
			target_link_libraries($target
				PRIVATE ftxui::screen
				PRIVATE ftxui::dom
				PRIVATE ftxui::component
			)
EOF2
})
EOF
}

with_common_indent () {
	local num_indents="$1"
	local str
	local str_tab_list
	str="$(cat)"
	str_tab_list=($(
		echo "$str" |
		sed -E 's/^(\t*).*/\1/g' |
		tr '\t' '-'
	))
	local least_num_indents=${#str_tab_list[0]}
	for str_tab in "${str_tab_list[@]}"; do
		least_num_indents=$(math_min ${#str_tab} $least_num_indents)
	done

	cur_common_indent=$(
		for i in $(seq 1 $least_num_indents); do
			echo -n '\t'
		done
	)

	new_common_indent=$(
		for i in $(seq 1 $num_indents); do
			echo -n '\t'
		done
	)

	echo "$str" |
		sed "s/^$cur_common_indent/$new_common_indent/g"
}

math_min () {
	local num1=$1
	local num2=$2
	if ((num1 < num2)); then
		echo $num1
	else
		echo $num2
	fi
}

make_open_config () {
	local open_config_path="$1"

	if [[ ! -f "$open_config_path" ]]; then
		get_open_config > "$open_config_path"
	fi

	local open_config_str

	open_config_str=$(for i in $(seq 1 "$(get_open_config | wc -l)"); do
		local line
		line=$(get_open_config | get_line "$i") 
		local var_part
		var_part=$(echo "$line" | get_var_part)
		local val_part
		val_part=$(echo "$var_part" | get_value_in "$open_config_path")
		if [[ "$val_part" == "" ]]; then
			echo "$line"
		else
			echo "$val_part" | prefix "${var_part}="
		fi
	done)

	echo "$open_config_str" > "$open_config_path"
}

get_line () {
	sed -n "$1p"
}

get_var_part () {
	sed -n "/^[^ ]\+=[^ ]*$/p" | sed -E "s/^(.*)=.*$/\1/"
}

get_value_in () {
	local piped
	piped="$(cat)"
	cat "$1" | sed -n "/^${piped}\+=[^ ]*$/p" | sed -E "s/${piped}=(.*)$/\1/"
}

prefix () {
	echo "$1$(cat)"
}

main "$@"
